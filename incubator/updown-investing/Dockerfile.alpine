# Install the base requirements for the app
# This stage is to support development
FROM --platform=$BUILDPLATFORM python:3.10-alpine AS python-base

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

# builder-base is used to build dependencies
FROM python-base AS builder-base
RUN apk add --no-cache \
    curl \
    gcc \
    libressl-dev \
    musl-dev \
    libffi-dev \
    shadow

ENV POETRY_VERSION=1.4.2
# SHELL ["/bin/sh", "-o", "pipefail", "-c"]
RUN curl -sSL https://install.python-poetry.org | POETRY_HOME=${POETRY_HOME} python3 - --version ${POETRY_VERSION} && \
    chmod a+x /opt/poetry/bin/poetry

# We copy our Python requirements here to cache them
# and install only runtime deps using poetry
WORKDIR $PYSETUP_PATH
COPY ./poetry.lock ./pyproject.toml ./
RUN poetry install --only main  # respects

RUN apk del \
    curl \
    gcc \
    libressl-dev \
    musl-dev \
    libffi-dev

FROM python-base as development
ENV FASTAPI_ENV=development

# Copying poetry and venv into image
COPY --from=builder-base $POETRY_HOME $POETRY_HOME
COPY --from=builder-base $PYSETUP_PATH $PYSETUP_PATH

# Copying in our entrypoint
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# venv already has runtime deps installed we get a quicker install
# the next install command installs the dev dependencies
WORKDIR $PYSETUP_PATH
RUN poetry install

WORKDIR /app
COPY . .

EXPOSE 8000
CMD ["uvicorn", "--reload", "--host=0.0.0.0", "--port=8000", "app.main:app"]

# 'lint' stage runs black and isort
# running in check mode means build will fail if any linting errors occur
FROM development AS lint
RUN black --config ./pyproject.toml --check app tests
RUN isort --settings-path ./pyproject.toml --check-only app tests
CMD ["tail", "-f", "/dev/null"]

# 'test' stage runs our unit tests with pytest and
# coverage.  Build will fail if test coverage is under 95%
FROM development AS test
CMD ["/bin/sh", "./scripts/test.sh"]

# 'production' stage uses the clean 'python-base' stage and copyies
# in only our runtime deps that were installed in the 'builder-base'
FROM python-base AS production-gunicorn
ENV FASTAPI_ENV=production

COPY --from=builder-base $VENV_PATH $VENV_PATH
COPY gunicorn_conf.py /gunicorn_conf.py

COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

RUN apk add --no-cache shadow
ARG UID=40403
ARG GID=40403
# RUN groupadd -g $GID -o poetry && useradd -m -u $UID -g $GID -o -r poetry
# RUN apk del shadow
RUN groupadd -g $GID -o poetry && \
    adduser -D -u $UID -G poetry poetry

COPY --chown=poetry:poetry ./app /app
USER poetry
WORKDIR /app

ARG PORT=8000
ENTRYPOINT /docker-entrypoint.sh $0 $@
CMD ["PORT=${PORT}", "gunicorn", \
    "--worker-class uvicorn.workers.UvicornWorker", \
    "--config /gunicorn_conf.py", \
    "main:app"]

# uvicorn https://github.com/tiangolo/uvicorn-gunicorn-docker#-alpine-python-warning
FROM python-base AS production-uvicorn
ENV FASTAPI_ENV=production
COPY --from=builder-base $VENV_PATH $VENV_PATH
COPY docker-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

ARG UID=40403
ARG GID=40403
# RUN groupadd -g $GID -o poetry && useradd -m -u $UID -g $GID -o -r poetry
# RUN apk del shadow
RUN groupadd -g $GID -o poetry && \
    adduser -D -u $UID -G poetry poetry

COPY --chown=poetry:poetry ./app /app
USER poetry
WORKDIR /app
EXPOSE 40403
CMD [ \
    "uvicorn", "app.main:app", \
    "--workers", "1", \
    "--limit-concurrency", "5000", \
    # "--limit-max-requests", "10000", \
    "--timeout-keep-alive", "5", \
    "--backlog", "2048", \
    "--host", "0.0.0.0", \
    "--port", "40403" \
    ]
